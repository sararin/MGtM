operations -> computer calculations
              arithmetic operations -> add/sub etc
              logic operations -> and/or/not

components of modern computer -> control unit -> reads instructions from memory and interprets them
                                 arithmetic unit -> actually does stuff
                                 input dev -> like keyboard
                                 output dev -> like monitor
                                 memory sys

ALU -> takes two inputs, command input, returns output and status output
       A,B -> inputs
       + -> command input
       A+B -> output
       1 -> status output(in this case indicating sucess)

Information -> everything that you can percieve
               noise -> unimportant information
               signal -> important
               you want to maximalise signal-to-noise ratio
               info on pc is discreete, irl information is often continuous
               so since digital is discrete, you lose some of the info

Why discrete -> cause there are only two states
                low voltage and high voltage
                high volt -> close to supply voltage
                low volt -> close to the ground(zero)

Counting in binary -> remember bit is one digit
                      by shifting you multiply or divide by two
                      you also have to remember about carry-over values which happen when you try to make number bigger than 1
                      for example 1 + 1 = 10(the carry happens)
                      The substraction though is different
                      Two's compliment -> instead of A-B you perform ( (not A) + 1 ) + B
                      Fixed point -> dec point stays in place
                      Floating point -> it's shifted with information how much(the *10^x bit)
                                        in PC we use base 2 so for example 1.69 * 2^n

Logic operators -> in integrated circuts
                   generally logic circut takes some input and spits output
                   AND -> =) takes A B and returns true if A AND B are true
                   OR -> => takes A B and returns true if A OR B are true
                   NOT -> >. takes A and returns the oposite
                   NAND -> =). takes A B and returns true if A AND B arent true
                   NOR -> =>. takes A B and returns true if A OR B arent true
                   XOR -> |=> takes A B and returns true if either A OR B are true
                   De Morgans theorem -> NAND is the same as using OR on each inputs complement
                                         NOR is the same as using AND and each inputs complement
                                         NAND -> =). same as ..=> as in negating the inputs and ORing
                                         NOR -> =>. same as ..=) same as negating the inputs and ANDing

Half adder! -> uses AND =) and XOR |=> gates
               XOR is used for lower digit
               while AND decides whenever or not set carry to 1
               A XOR B = value of A+B
               A AND B = if carry exist(for 1 AND 1 it does)
               Full adder -> (A B)half-adder(S1 Cout1) 
                             (S1 Cin)half-adder(S2 Cout2)
                             (Cout1 Cout2)OR(Cout3)
                             final is (S2 Cout3)
               Ripple carry adder -> 1 half-adder and n full-adders
                                     (A0 B0)Half-adder(S0 Cout0)
                                     (A1 B1 Cout0)Full-adder(S1 Cout1)
                                     ...
                                     (An Bn Cout(n-1))Full-adder(Sn Coutn)
                                     (Sn Cout)                                     
                                     they are slow as fuck because of the carry tho
               Carry look-ahead adder -> determines the direction during add or sub
                                         circuit is bigger but a lot quicker

Registers -> memory storage inside of CPU(very short term)
             used to perform calculations before they are stored elsewere
Memory -> important, you can't store everything in registers after all
          so you have dedicated circuts which store that(latch),
          they have to have some trigger condition to swap 1 and 0
          flip-flop -> basic component of memory circuit
                       they can freeily change states based on input
                       accepts two inputs(most of the time) and two ouputs Q and ~Q
                       RS flip-flop -> R(eset) S(et)
                                       set S to 1 makes Q 1
                                       set R to 1 and no matter the state of S, Q will be 0
                                       it remembers which it got last S or R and sets Q accordingly
                                       (S, output of 2st NAND)(NAND)(Q)
                                       (R, output of 1st NAND)(NAND)(~Q)
                                       you can replace NAND with NOR
                                       (S, R) -> (Q ~Q)
                                       (1, 1) -> (no change) (0, 1) -> (1, 0 set) (1, 0) -> (0, 1 reset) (0, 0) -> (1, 1 illegal)
                       D flip-flop -> it reads state of input D when input C changes from low state to high state
                                      Clock -> stands for C most of the time
                                               most of them raising edge(0 changing state to 1) is called action signal
                                               if it goes from low to high it's called rising edge
                                               if it goes from high to low it's called falling edge
                       T flip-flop -> when input T does the raising edge thing(changes state from low to high)
                                      output Q changes state
                                      toggling -> what T stands in this flip-flop
                                                  flipping between 1 and 0
                                      counter circuit -> made out of chaining serval T flip-flops together
                                                         second T changes state when first T creates a raising edge
                                                         so it's two times slower, third one is 4 times slower 4th one is 8 times slower
                                                         01 -> 0011 -> 00001111 -> 0000000011111111
                                                         asynchronous counter -> this is example of such counter cause flip-flops aren't connected to one clock
                                                         synchronous counter -> every flip-flop gets trigger signal from one clock, they all turn on the same time

HDL -> hardware description language, defines operations on the circuit
CAD -> computer aided design, we don't draw them by hand but design them in our computers which speed up the process
       it was bootstrapping of sorts, we designed simple programs first

Address -> a memory location
           memory -> place where data and programs are stored
                     good practice, segment data and programs
                     CPU has full control over address space
           why addresses are good thing? CPU can point to address and read data from that point in memory
Bus -> path that transmits data
       actually caled address bus
       CPU -(address bus)-> memory
       CPU <-(data bus)- memory
       CPU -(internal data bus(MUX which change flow of data))-> inside CPU
       CPU -(external bus USB)- memory
       bundled signal pathways -> what buses really are
                                  each signal pathway codes only one bit
                                  so you have to combine many to send bigger amounts of data than 1bit
                                  for example, if buses are 4bit wide
                                  4bit inputs enter ALU and 4bit output exits it
       Address space size -> how large your memory is, determined by address bus width
                             mem capacity and bus width -> if our address bus width is n bits,
                                                           then we have 2^n addresses
                                                           our memory capacity is (2^n)/8 KB
R/W and I/O -> control signals
               R/W -> stands for read/write
                      read -> extract data(load)
                      write -> save data(store)
                      R/W -> hardware perspective, electrical operations on memory
                      L/S -> software perspective, all about registers and it's relation to memory
                      CPU deals with R/W instruction signals, and talks to memory using buses
                      Bus -> address bus gives addres
                             control bus gives instruction
                             data bus fetches the data
               I/O -> stands for input/output
                      I/O control signals!
                      I/O port -> connects input device and CPU directly
Instructions -> instruction resides at some address, and contains operands(which store some address) and opcode(which defines operation)
                opcodes -> short for operation code
                           operates on operands
                           operands -> most often they are some addresses in memory
                so entire thing looks like
                (data at address 30) (opcode) (data at address 31)
                registers -> you can't execute instruction directly
                             you have to use a register to store data first
                             two kinds of registers: accumulator -> used for calculations
                                                     general purpose -> everything else
                so since you need to use registers, in reality addition looks like this
                save data from address X at accumulator
                save data from addrtess Y to general purpose register
                accumulator contains result of addition of those two
                instruction register -> stores instruction for program read from memory

Instruction cycle -> program counter(PC) -> hold address of next instruction to be executed
                                            because of jumps and branches, it doesn't have to count from 1 to n
                     cycle -> after you execute an operation, address of next instruction from PC
                              is transfered to address register and forwarded to memory
                              then, memory sends instruction located at that address back to CPU
                              it's stored in instruction register, decoded and interpreted
                              then results are stored in memory
                     instruction decoder -> breaks down instruction from memory into form CPU can understand

Virtual memory -> OS decides how programs interact with physical memory.
                  it also only exposes it through virtual memory(this is what programs interact with)
                  hardware mapping virtual memoery to physical memory is Memory Management Unit

Memory -> two flavors
          primary memory -> cleaned after turning computer off
                            can be read from directly
          secondary memory -> persistent, survives boots
                              CPU can't read directly from it
                              CPU sends control signals to HDD interface
                              which translates it to something HDD can understand
          quickness of access is inversly proportional to it's storage size
          registers are the fastest, then cache mem, primary mem, disk cache, secondary mem
          cache -> temporaily stores frequently used data
          address space -> all memory outside of CPU
                           but controlled by CPU
                           divided into two parts, RAM -> (random access memory)
                                                          non-persistent
                                                   ROM -> (read only memory)
                                                          persistents between boots
                                                          BIOS -> stored on ROM, boots system up
                                                   I/O spaces -> exists as well, but isn't always part of address space
                                                                 I/O port exists within this space

Interrupts -> while one thing happen, you start doing other one
              for example, it responds to external input when crunching numbers
              no interups -> CPU has to check perodically if something had happen
              interrups -> CPU gets a notification
              after the interrupt, cpu easily returns to previous calculations
              stack -> that thing, last in last out
                       you can push stuff on it and pop
                       you can overflow it
                       stack pointer -> points at last address stack worked with
              when interrupt happens, data(accumulator, status registers, program counter)
              is saved on stack, it can have several interrupts in it
              interrupt priority -> what happens when
                                    interrupt mask -> allow to ignore the interrupt
                                                      non-maskable interrups -> NMI, cant ignore these, for example:
                                                      reset -> interrupt you can't ignore
                                                               even if having a mask
                                                               sets state to initial one
              timer interrups -> issue an interrupt when they reach zero after counting down
                                 allow to execute program at regularly timed intervals
                                 general timer interrupt block looks like this:
                                 block -> master clock -(prescaler, freq divider which lower the freq by select register)
                                       -> timer basis clock -(decreasing timer, latch signal is inital value register(from where count))
                                       -> timer interrupt
                                 Timer interrupt control -> two inputs. RESET and INIT(chose a value)
              Reset signals -> set programs/internal circuits to initial state
                               for example set program counter to zero
                               they are issued every time you start a computer
                               reset is tricky though, after turn on, power fluctuates a bit
                               it has to stabilise, so we keep a reset until it does

Instruction types -> arithmetic calc -> self explanatory
                     logic instructions -> already covered(AND,OR,XOR,NOT)
                     bit shift instructions -> shift values together
                                               logical shift -> 01100100 >> 2 = 00011001
                                                                quick multiplication and division by multiples of 2
                                               but a catch!
                                               sign bit -> leftmost bit which tells you if num is positive or negative
                                                           011 is +3
                                                           101 is -3(why, because of two's compliment rule)
                                                           this way 0 is exactly 000
                                                                   -1 is         111
                                                                   -4 is         100
                                               logical shift -> no sign bit
                                               arithmetic shift -> has sign bit
                                                                   when you do logic shift you just shit
                                                                   in arithmetic shift you pay attention to sign bit
                                                                   if it's 0 you fill up with zeros 01100100 >> 2 = 00011001
                                                                   if it's 1 you fill up with ones  11100100 >> 2 = 11111001
                                               overflow -> when numbers overclock, might happen when you left shift too much
                                                           0011 << 2 = 1100
                                                           number turns negative
                                                           also when it occurs, the overflow flag is supposed to be set
                                               circular shifts -> exactly what's on the tin
                                                                  001011 >> 3 = 011001

                     data transfer instructions -> deal with transfer of data
                                                   from register to egister
                                                   from CPU to memory
                     I/O instructions -> CPU exchaning data with external devices
                     branching instructions -> jumping from one address to other
                                               can be conditioal or not
                                               branch instructions -> brach to address not far from execution site
                                               jump instructions -> jump to addresses farther away
                                               skip instructions -> can skip(or not) next instruction to be executed
                     conditionals -> first you have to evaluate the condition
                                     for example compare two integers
                                     status flag -> called status bit
                                                    is set if condition is true
                                                    or if operation was sucessful
                                                    can be either 1 or 0
                                                    in reality many kinds of flag exist, sign flags, carry flags and so on
                                                    they are stored in status registers(8/16bit combinations of lots of flags)
                                     now after you have a status flag
                                     you can branch if flag is positive

GPU and CPU -> share exclusive I/O port
               display and CPU aren't directly connected

Operand types -> target data/address of an operation
                 (opcode is type of instruction)
                 (they also work on accumulators most of the time)
                 opcode source-operand destination-operand
                 types -> a value -> add2 operand which adds two
                          address reference -> absolute addressing -> data is at n address
                                                                      also called effective address or direct addressing
                                                                      some CPUs have size of opcode smaller than address space
                                                                      operand can't contain entire address space this way
                                               relative addressing -> effective address is sum of operand value and program counter
                                                                      address in relation to program counter
                                                                      called xx-register relative addresses
                                                                      often used in jump instructions
                                               indirect addressing -> address n contains reference to data at address x
                                                                      nice when you want to access address with very long number
                                                                      because no. of bits reserved for operand is limited
                          address modification -> using value stored in modification register to modify number or address
                                                  you add value of modification register to base value, then you may store it in another register
                                                  in program counter
                                                  in immediate value
                                                  index register -> one of most commonly used modification register
                                                  base register -> contains value we want to use as base
                                                  useful for extracting particular data from a set
                                                  because you can specify the offset in index register
                                                  and start of data set in base register

transmission -> serial -> one bit at time
                parallel -> at the same time

Registers -> accumulator -> stores calculation results from ALU
             instruction register/decoder -> store and decode program instructions
             status registers -> collection of flags taking value 1 or 0
                                 often lumped together
             modification registers -> base registers, index registers
                                       serve as starting point in certain addressing modes
                                       base -> holds basis for address calculations
                                       index -> holds fixed val that modify operand immediate values to form effective address
             temporary registers -> save temporary data 
             program counters -> holds address of next instruction to be executed
             stack pointer -> hold last used stack address

Flags -> Z(ero)-flag -> indicates if accumulator equals zero
                        useful if cpu doesnt have module for comparsions
         S(ign)-flag -> tells if num is neg or poz
         C(arry)-flag -> indicates if carry or overflow occured
                         also set if bitshift operation resulted in overflow
         Borrow-flag -> indicates if borrow occured during substraction
         GT flag -> set if outcome is "greater than"
         LT flag -> set if outcome is "less than"
         odd flag -> if result is odd number
         interrupt mask -> set beforehand, determines what type of interrups can occur
